function [y1] = A2_9(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 27-Jan-2022 20:03:29.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx21 matrix, input #1
% and returns:
%   y = Qx9 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [104.48973272727272388 97.148067272727274712 176.69558181818183584 62.07521272727272077 85.316276363636347924 68.006449090909086408 165.31190909090906871 43.911653636363631392 111.36222363636363752 210.27750909090909204 196.21061999999997738 157.57265090909089622 142.35082909090908743 58.253765454545458624 92.245379999999983056 41.651132181818177003 56.74891272727272451 107.79394545454543675 93.959516363636353731 68.803336363636361739 72.246370909090899204;114.00214457142860169 149.12448571428572563 158.75041714285711691 72.915375428571422844 78.38738057142856519 155.97135657142860055 205.90280571428570511 95.729916571428574912 138.89396800000000098 199.9516399999999976 187.97082285714287764 128.93081028571427282 117.85650114285712675 81.627309714285715359 98.902855999999999881 50.429583428571426396 62.280394857142866272 96.755169714285713667 80.485063999999994167 69.941996000000003164 68.211932571428562255;128.23462048192769203 186.00530120481931817 192.31674096385543749 65.212596385542184407 73.303405421686761656 193.71386144578318067 200.67201204819281202 159.21343855421685021 190.42198192771081722 205.10274096385538201 199.82266265060241039 192.51612951807231866 171.49260240963857882 71.537003012048188566 90.159793373493968716 44.974161445783138902 54.970167469879527289 90.932359036144575271 78.787425301204848438 60.348109638554220169 64.579843373493972081;107.62672105263158073 117.23506466165412121 121.58930977443607446 94.457956390977457772 98.799422556390965156 114.47448496240599525 164.37687067669173757 82.311551127819541307 107.77728571428571058 161.2783751879699139 132.74453609022555156 104.35847368421050874 87.399944360902281915 105.38354210526313182 118.60426390977441713 75.953317293233084229 78.353607518797019793 119.7828834586466229 106.53111353383457072 83.766345864661658993 86.522165413533855371;130.32827184466017911 177.28626213592229988 152.16559514563107314 99.007457281553385542 95.484672815533969015 195.00409320388348533 201.65899029126208575 147.08049029126209462 165.40155922330094995 188.68048543689315011 164.88971359223296531 143.95547475728153586 110.41116601941746467 109.09444077669903095 120.10822524271844713 87.951239805825238705 79.464397087378628726 116.61685242718444044 108.82925339805824194 73.990134951456283829 84.379903883495160244;115.97495833333333337 187.87161666666671067 154.76761666666669726 66.379919166666653041 58.462076666666654035 200.71331666666668525 223.71187499999999204 151.68562500000001592 175.3756725000000074 211.28338333333329047 175.11818249999998898 138.74797666666665918 92.882525833333303922 78.274017499999999359 86.304505833333323039 47.126458333333332007 55.932727500000005705 74.956505000000007044 57.118509999999986348 52.528950833333325932 51.255605833333326871;90.676722727272732527 90.188418181818178709 74.370476136363620867 100.07887613636363255 98.322818181818178118 75.501862499999973011 115.19086363636363046 75.406245454545455686 94.65463409090907021 77.499732954545464736 68.062811363636356532 78.399295454545452344 73.336531818181811104 109.0365124999999864 117.60974318181818887 86.122840681818189523 87.848984090909084443 116.26257386363634794 105.86381931818182522 87.614670454545446887 84.865801136363643309;91.201725190839681545 125.91078854961831723 81.115203053435095626 82.547133587786248654 76.562793129770966516 103.14471679389313863 194.77251832061068626 79.249916183206096321 126.47588549618319576 127.77281679389312785 61.798306870229005483 80.601297709923670709 53.10519320610685412 91.758703358778618053 106.64077786259541369 62.867484274809164901 69.542185496183208215 94.239459541984714974 75.913666412213743229 67.904695419847328708 69.446995419847340258;103.78334245283019754 172.60868867924531855 97.141220754716968599 81.164134905660375807 66.398476415094336289 187.06539622641508913 214.56476415094340382 131.06489433962264002 157.73988867924526858 156.00353207547169632 82.508383867924550259 95.695925471698117803 52.884780754716977924 93.033382075471678263 105.7799849056603847 58.893026415094340109 68.507052830188669645 85.70063962264151769 59.532465094339620748 63.226881132075462233 58.709331132075469384];

% ===== SIMULATION ========

% Input 1
x1 = x1';
% no processing

% Layer 1
z1 = negdist_apply(IW1_1,x1);
a1 = compet_apply(z1);

% Output 1
y1 = a1;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
