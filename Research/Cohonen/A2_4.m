function [y1] = A2_4(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 27-Jan-2022 19:27:16.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx21 matrix, input #1
% and returns:
%   y = Qx4 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [94.154349803921562057 106.77712039215685991 85.126165882352921699 94.063044313725498569 91.478759215686281436 89.893261176470574014 154.63126274509801306 75.674929490196063853 106.90897607843139383 112.03653686274508061 75.950046666666636952 84.370500392156870362 67.476946705882369315 102.50141623529411561 114.7029772549019242 78.943547137254896029 80.463966666666664196 109.48078352941172398 96.594007450980399199 79.975450980392125189 81.209308235294116685;106.8541784482758743 169.08756465517240031 108.37300129310345653 81.747016810344831583 70.446386637931027508 177.44093620689659474 213.48727586206896945 128.68473491379307916 156.73736681034483809 168.42528017241380667 100.3329081465517163 102.1165461206896623 61.237851896551724451 91.687563362068956963 104.898200862068947 62.160629741379295865 69.697764224137927158 89.150544396551737236 66.149340517241370208 65.236022844827573408 62.867480172413799266;110.57094159999999761 127.04832920000001195 155.20791199999999321 76.199779199999994717 86.612934399999986113 123.60336320000000399 183.90785800000000449 78.437400600000003692 122.24476919999997904 193.32515599999996425 182.62771639999999707 127.30289800000001321 117.31392600000000925 82.801602799999983517 103.87300400000002298 54.200707239999985632 64.913585600000004661 107.18420119999998974 92.455097199999997315 73.807093600000001743 74.598486000000008289;125.60916759776537788 183.50337709497208039 177.84186871508381955 70.820349162011169142 73.918863687150846431 196.11473184357544142 208.96175698324023529 149.49143407821230767 179.44561033519556759 206.5086256983240105 193.69805055865930399 170.12422681564243021 140.49948687150839532 79.474194134078231855 92.936833519553061933 53.120441061452524423 58.875558659217887225 91.504368435754173561 80.202366759776566596 60.475559497206710091 65.232250558659231388];

% ===== SIMULATION ========

% Input 1
x1 = x1';
% no processing

% Layer 1
z1 = negdist_apply(IW1_1,x1);
a1 = compet_apply(z1);

% Output 1
y1 = a1;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
