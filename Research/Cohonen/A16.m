function [y1] = A16(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 27-Jan-2022 18:39:32.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx16 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [89.685962500000002251 88.217267187500013392 69.324946874999994861 101.24980312499999968 100.01093437500000505;102.90128309859156275 98.844463380281666787 116.47825211267607415 95.476814084507040548 102.26749577464788388;112.00788333333332503 107.2009000000000043 166.63021428571425986 78.355197619047615376 98.670233333333328574;90.671763157894730512 79.776057894736823073 168.07973684210526244 45.918836842105264395 72.248910526315782477;106.62593396226417042 130.01690566037734698 80.158122641509436335 117.75652075471698765 98.771460377358494043;109.75292337662338582 137.99472727272726047 121.75066623376622488 86.972432467532485134 93.880470129870133178;120.82117241379310713 151.27774712643679322 160.36632183908042748 81.95853218390803363 92.315428735632167445;118.4466551724137986 150.76105172413792843 187.55618965517243169 62.248355172413795344 76.765937931034486041;81.472076562499978536 116.59846406249999973 80.965728124999998272 67.665779687500005934 62.564848437500003797;97.290572916666647529 154.89516666666668243 66.031683333333333508 90.653483333333340966 78.320318750000012642;130.44222413793102078 182.14937931034478424 139.68700517241379089 106.73460517241377943 95.480698275862053492;134.49179120879122706 185.07994505494505688 183.80392307692306986 80.493269230769229239 92.212408791208787306;102.78852698412697464 179.55869841269841913 101.20213968253966641 74.599050793650789615 58.386480952380949816;102.99990250000001879 144.85587500000005434 141.87097499999998718 67.876457500000000778 61.001481250000018974;115.23696874999997419 185.82793749999999022 148.59776041666665947 69.320606250000011528 60.654440624999985232;125.09334343434346692 195.12682828282828496 191.5368484848484627 58.214685858585859535 59.526174747474755122];

% ===== SIMULATION ========

% Input 1
x1 = x1';
% no processing

% Layer 1
z1 = negdist_apply(IW1_1,x1);
a1 = compet_apply(z1);

% Output 1
y1 = a1;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
